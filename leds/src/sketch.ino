#include "public.h"
/*有三大块显存：
 * 1\rgb_datas 32x16
 * 2\rgb_backup 32x16
 * 3\hz_mem     64x16
 * 4\hz
 * */

static void fill_8x16(unsigned char offset_8x16_fb, unsigned char count_8x16_zk);
static void fill_32x16(unsigned char offset_8x16_fb, unsigned char count_8x16_zk);
static void fill_16x16(unsigned char offset_8x16_fb, unsigned char count_8x16_zk);
struct line123 {
	unsigned char f0;
	unsigned char f1;
	unsigned char f2;
	unsigned char f3;
};

struct _rgb_line { 
	unsigned char r[4];
	unsigned char g[4];
	unsigned char b[4];
};

struct _rgb_half_line { 
	unsigned char r[2];
	unsigned char g[2];
	unsigned char b[2];
};

struct _rgb_quarter_line { 
	unsigned char r;
	unsigned char g;
	unsigned char b;
};
struct pixel { 
	unsigned char r;
	unsigned char g;
	unsigned char b;
};
/*一个字16*16*/
struct _rgb_quarter_line hz_mem[64];
/*zi ku*/
const struct _rgb_quarter_line PROGMEM hz[]={
//struct _rgb_quarter_line hz[]={
/*止*/
{0x00,0x01,0x00},
{0x00,0x01,0x00},
{0x00,0x01,0x00},
{0x00,0x11,0x00},
{0x00,0x11,0x00},
{0x00,0x11,0x00},
{0x00,0x11,0x00},
{0x00,0x11,0x00},
{0x00,0x11,0x00},
{0x00,0x11,0x00},
{0x00,0x11,0x00},
{0x00,0x11,0x00},
{0x00,0x11,0x00},
{0x00,0x11,0x00},
{0x00,0xff,0x00},
{0x00,0x00,0x00},
/**************/
{0x00,0x00,0x00},
{0x00,0x00,0x00},
{0x00,0x00,0x00},
{0x00,0x00,0x00},
{0x00,0x00,0x00},
{0x00,0x10,0x00},
{0x00,0xf8,0x00},
{0x00,0x00,0x00},
{0x00,0x00,0x00},
{0x00,0x00,0x00},
{0x00,0x00,0x00},
{0x00,0x00,0x00},
{0x00,0x00,0x00},
{0x00,0x04,0x00},
{0x00,0xfe,0x00},
{0x00,0x00,0x00},
/*好*/
{0x00,0x10,0x00},
{0x00,0x11,0x00},
{0x00,0x10,0x00},
{0x00,0x10,0x00},
{0x00,0xfc,0x00},
{0x00,0x24,0x00},
{0x00,0x24,0x00},
{0x00,0x27,0x00},
{0x00,0x24,0x00},
{0x00,0x44,0x00},
{0x00,0x28,0x00},
{0x00,0x10,0x00},
{0x00,0x28,0x00},
{0x00,0x44,0x00},
{0x00,0x84,0x00},
{0x00,0x00,0x00},
{0x00,0x00,0x00},
{0x00,0xfc,0x00},
{0x00,0x04,0x00},
{0x00,0x08,0x00},
{0x00,0x10,0x00},
{0x00,0x20,0x00},
{0x00,0x24,0x00},
{0x00,0xfe,0x00},
{0x00,0x20,0x00},
{0x00,0x20,0x00},
{0x00,0x20,0x00},
{0x00,0x20,0x00},
{0x00,0x20,0x00},
{0x00,0x20,0x00},
{0x00,0xa0,0x00},
{0x00,0x40,0x00},
/*********/
{0x00,0x00,0x00},
{0x00,0x78,0x00},
{0x00,0x48,0x00},
{0x00,0x57,0x00},
{0x00,0x50,0x00},
{0x00,0x60,0x00},
{0x00,0x51,0x00},
{0x00,0x4a,0x00},
{0x00,0x4b,0x00},
{0x00,0x48,0x00},
{0x00,0x69,0x00},
{0x00,0x51,0x00},
{0x00,0x42,0x00},
{0x00,0x44,0x00},
{0x00,0x40,0x00},
{0x00,0x40,0x00},
{0x00,0x40,0x00},
{0x00,0x40,0x00},
{0x00,0x44,0x00},
{0x00,0xfe,0x00},
{0x00,0x80,0x00},
{0x00,0xa0,0x00},
{0x00,0x20,0x00},
{0x00,0x28,0x00},
{0x00,0xfc,0x00},
{0x00,0x20,0x00},
{0x00,0x28,0x00},
{0x00,0x24,0x00},
{0x00,0x26,0x00},
{0x00,0x22,0x00},
{0x00,0xa0,0x00},
{0x00,0x40,0x00},
/*东***/
{0x00,0x02,0x00},
{0x00,0x02,0x00},
{0x00,0x02,0x00},
{0x00,0xff,0x00},
{0x00,0x04,0x00},
{0x00,0x09,0x00},
{0x00,0x09,0x00},
{0x00,0x11,0x00},
{0x00,0x3f,0x00},
{0x00,0x01,0x00},
{0x00,0x09,0x00},
{0x00,0x09,0x00},
{0x00,0x11,0x00},
{0x00,0x21,0x00},
{0x00,0x45,0x00},
{0x00,0x02,0x00},
{0x00,0x00,0x00},
{0x00,0x00,0x00},
{0x00,0x04,0x00},
{0x00,0xfe,0x00},
{0x00,0x00,0x00},
{0x00,0x00,0x00},
{0x00,0x00,0x00},
{0x00,0x10,0x00},
{0x00,0xf8,0x00},
{0x00,0x00,0x00},
{0x00,0x40,0x00},
{0x00,0x20,0x00},
{0x00,0x10,0x00},
{0x00,0x18,0x00},
{0x00,0x08,0x00},
{0x00,0x00,0x00}
};

struct _rgb_line rgb_backup[H];
#if 0
struct _rgb_line rgb_datas[H] = {
	{0xff,0xff,0x03,0x00,
		0x00,0x00,0xfc,0xff,
		0x00,0x00,0x00,0x00},
	{0xff,0xff,0x03,0x00,
		0x00,0x00,0xfc,0xff,
		0x00,0x00,0x00,0x00},
	{0xff,0xff,0x03,0x00,
		0x00,0x00,0xfc,0xff,
		0x00,0x00,0x00,0x00},
	{0xff,0xff,0x03,0x00,
		0x00,0x00,0xfc,0xff,
		0x00,0x00,0x00,0x00},
	{0xff,0xff,0x03,0x00,
		0x00,0x00,0xfc,0xff,
		0x00,0x00,0x00,0x00},
	{0xff,0xff,0x03,0x00,
		0x00,0x00,0xfc,0xff,
		0x00,0x00,0x00,0x00},
	{0xff,0xff,0x03,0x00,
		0x00,0x00,0xfc,0xff,
		0x00,0x00,0x00,0x00},
	{0xff,0xff,0x03,0x00,
		0x00,0x00,0xfc,0xff,
		0x00,0x00,0xfc,0xff},
	{0xff,0xff,0x03,0x00,
		0xff,0xff,0xff,0xff,
		0x00,0x00,0xfc,0xff},
	{0xff,0xff,0x03,0x00,
		0xff,0xff,0xff,0xff,
		0x00,0x00,0xfc,0xff},
	{0xff,0xff,0x03,0x00,
		0xff,0xff,0xff,0xff,
		0x00,0x00,0xfc,0xff},
	{0xff,0xff,0x03,0x00,
		0xff,0xff,0xff,0xff,
		0x00,0x00,0xfc,0xff},
	{0xff,0xff,0x03,0x00,
		0xff,0xff,0xff,0xff,
		0x00,0x00,0xfc,0xff},
	{0xff,0xff,0x03,0x00,
		0xff,0xff,0xff,0xff,
		0x00,0x00,0xfc,0xff},
	{0xff,0xff,0x03,0x00,
		0xff,0xff,0xff,0xff,
		0x00,0x00,0xfc,0xff},
	{0xff,0xff,0x03,0x00,
		0xff,0xff,0xff,0xff,
		0x00,0x00,0xfc,0xff}
};
#endif
static struct _rgb_line rgb_datas[H];
/*
 = {
{0x00,0x00,0x00,0x00,
0x1f,0xf0,0x1f,0xf0,
0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,
0x01,0x00,0x01,0x00,
0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,
0x7f,0xfe,0x7f,0xfe,
0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,
0x51,0x12,0x51,0x12,
0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,
0x8d,0x64,0x8d,0x64,
0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,
0x11,0x10,0x11,0x10,
0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,
0x01,0x04,0x01,0x04,
0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,
0xff,0xfe,0xff,0xfe,
0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,
0x02,0x00,0x02,0x00,
0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,
0x04,0x08,0x04,0x08,
0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,
0x3f,0xfc,0x3f,0xfc,
0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,
0x24,0x88,0x24,0x88,
0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,
0x24,0x88,0x24,0x88,
0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,
0x24,0x88,0x24,0x88,
0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,
0x24,0xa8,0x24,0xa8,
0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,
0x20,0x10,0x20,0x10,
0x00,0x00,0x00,0x00},
};
*/

static void shift_1bits(unsigned char r1,\
		unsigned char g1,\
		unsigned char b1,\
		unsigned char r2,\
		unsigned char g2,\
		unsigned char b2);
static void shift_8bits(unsigned char r1,\
		unsigned char g1,\
		unsigned char b1,\
		unsigned char r2,\
		unsigned char g2,\
		unsigned char b2);

void select_row(void);
void lock_data(void);
void init_gpio(void);
void init_rgb_datas(void);



static void shift_32bits(struct _rgb_line *rgb1,struct _rgb_line *rgb2);
static void update_32x16(void);
typedef struct {
	byte pin : 6;
	byte mode : 1;
	byte state : 1;
} DigitalPin;

void init_serial(void)
{
	Serial.begin(115200);
	Serial.print("begin!");
}

/*
 * begin 是以8x16为单位的，begin 是偏移值:0,1,2
 *0:表示从hz开始，１表示从8x16开始，类推
 *count 要读几块16*8数据
 * */
void read_flash_to_hz_mem(unsigned char begin,unsigned unsigned count)
{
	unsigned char i;
	unsigned char offset = begin*16;

	for (i=0;i<count*16;i++) {
		hz_mem[i].r = pgm_read_byte(&hz[i+offset].r);
		hz_mem[i].g = pgm_read_byte(&hz[i+offset].g);
		hz_mem[i].b = pgm_read_byte(&hz[i+offset].b);
	}
}
void shift_init(void)
{
	read_flash(0,4);
	fill_32x16(0,0);
	read_flash(4,4);
	fill_32x16(4,0);
}

void shift_begin(void)
{
	for(i=0;i<32) {
		shift_a_bit();
	}
	hz_locate++;

}

void shift_loop(void)
{
}

void shift_end(void)
{
}

void setup()
{
//	clear_screen();
	//read_flash();
	//strncpy_P((char *)&hz_mem[0], (const char*)pgm_read_word(&hz[0]), 96);

	init_serial();
	init_gpio();
	init_rgb_datas();
	fill_32x16(0, 0);

}
void loop()
{
	unsigned short i=0;
	//Serial.print("pic1!");


	read_flash();
	fill_32x16(0, 0);
	for(i=0;i<50;i++)
		update_32x16();
	read1_flash();
	fill_32x16(0, 0);
	for(i=0;i<50;i++)
		update_32x16();
}

static void init_gpio(void)
{
	pinMode(R, OUTPUT);
	pinMode(G, OUTPUT);
	pinMode(B, OUTPUT);
	pinMode(R2, OUTPUT);
	pinMode(G2, OUTPUT);
	pinMode(B2, OUTPUT);
	pinMode(SHCP, OUTPUT);
	pinMode(OE, OUTPUT);
	pinMode(LOCK, OUTPUT);
	pinMode(ROW0, OUTPUT);
	pinMode(ROW1, OUTPUT);
	pinMode(ROW2, OUTPUT);
	pinMode(16, OUTPUT);
}

static void init_rgb_datas(void)
{
	unsigned char i;
}

static void shift_1bits(unsigned char r1,\
		unsigned char g1,\
		unsigned char b1,\
		unsigned char r2,\
		unsigned char g2,\
		unsigned char b2)
{

	digitalWrite(SHCP, LOW);

	digitalWrite(R, r1>>7);
	digitalWrite(G, g1>>7);
	digitalWrite(B, b1>>7);

	digitalWrite(R2, r2>>7);
	digitalWrite(G2, g2>>7);
	digitalWrite(B2, b2>>7);

	digitalWrite(16, r1>>7);
	digitalWrite(16, g1>>7);
	digitalWrite(16, b1>>7);


	digitalWrite(16, r2>>7);
	digitalWrite(16, g2>>7);
	digitalWrite(16, b2>>7);
#if 0

	digitalWrite(R, r1&0x01);
	digitalWrite(G, g1&0x01);
	digitalWrite(B, b1&0x01);

	digitalWrite(R2, r2&0x01);
	digitalWrite(G2, g2&0x01);
	digitalWrite(B2, b2&0x01);
#endif

	digitalWrite(SHCP, HIGH);
}

static void shift_8bits(unsigned char r1,\
		unsigned char g1,\
		unsigned char b1,\
		unsigned char r2,\
		unsigned char g2,\
		unsigned char b2)
{
	unsigned char i;

	for(i=0; i<8; i++) {
		shift_1bits(r1,g1,b1,r2,g2,b2);
		r1<<=1;
		g1<<=1;
		b1<<=1;

		r2<<=1;
		g2<<=1;
		b2<<=1;
#if 0
		r1>>=1;
		g1>>=1;
		b1>>=1;

		r2>>=1;
		g2>>=1;
		b2>>=1;
#endif
	}
}

static void select_row(unsigned char line)
{
	digitalWrite(ROW0, line&0x01);
	digitalWrite(ROW1, (line&0x02)>>1);
	digitalWrite(ROW2, (line&0x04)>>2);
}

static void shift_32bits(struct _rgb_line *rgb1, struct _rgb_line *rgb2)
{
	unsigned char i;
	for(i=0;i<4;i++) {
		shift_8bits(rgb1->r[i],\
				rgb1->g[i],\
				rgb1->b[i],\
				rgb2->r[i],\
				rgb2->g[i],\
				rgb2->b[i]);
	}
}

static void lock_data(void)
{
	digitalWrite(LOCK, 1);
	digitalWrite(LOCK, 0);
}

static void output_data(void)
{
	digitalWrite(OE, 0);
	delayMicroseconds(200);
	digitalWrite(OE, 1);
	//	delayMicroseconds(500);
}

static struct _rgb_line rgb, rgb1;
static void update_32x16(void)
{
	unsigned char line;
	for(line=0; line<8; line++) {
		memcpy(rgb.r, (const void *)rgb_datas[line].r, 4);
		memcpy(rgb.g, (const void *)rgb_datas[line].g, 4);
		memcpy(rgb.b, (const void *)rgb_datas[line].b, 4);

		memcpy(rgb1.r, (const void *)rgb_datas[line+8].r, 4);
		memcpy(rgb1.g, (const void *)rgb_datas[line+8].g, 4);
		memcpy(rgb1.b, (const void *)rgb_datas[line+8].b, 4);
		shift_32bits(&rgb,&rgb1);
		select_row(line);
		lock_data();
		output_data();
	}
}

unsigned char byte_ofst(unsigned short pixel_index)
{
	return pixel_index/8;
}

static void setpixel(unsigned char x, unsigned char y, struct pixel p)
{
	unsigned char byteofst;
	unsigned char bitofst;
	unsigned char dat;

	if(x>(H-1) || y>(W-1)) return;
	byteofst = x/8;
	bitofst = (7-x%8);

	dat = rgb_datas[y].r[byteofst];
	if (p.r==0)
		dat &=~(0x01<<bitofst);
	else
		dat |=(0x01<<bitofst);

	dat = rgb_datas[y].g[byteofst];
	if (p.g==0)
		dat &=~(0x01<<bitofst);
	else
		dat |=(0x01<<bitofst);

	dat = rgb_datas[y].b[byteofst];
	if (p.b==0)
		dat &=~(0x01<<bitofst);
	else
		dat |=(0x01<<bitofst);
}

static void draw_a_color_screen(struct pixel p)
{
	unsigned char x=0;
	unsigned char y=0;
	for (y=0;y<H;y++)
	for (x=0;x<W;x++)
		setpixel(x, y, p);
}

static void clear_screen(void)
{
	unsigned char i=0;
	for (i=0;i<H;i++) {
		memset(rgb_datas[i].r, 0xff, W/8);
		memset(rgb_datas[i].g, 0xff, W/8);
		memset(rgb_datas[i].b, 0xff, W/8);
	}
}

static void draw_a_line(unsigned char line, struct _rgb_line rgbline)
{
	memcpy(rgb_datas[line].r, rgbline.r, W/8);
	memcpy(rgb_datas[line].g, rgbline.g, W/8);
	memcpy(rgb_datas[line].b, rgbline.b, W/8);
}

/*一个字有32的偏移, 一个字占的字节数为32*3=96个字节*/

/***************************

offset_8x16_fb:只能取如下值：0和4
****************************/
static void fill_32x16(unsigned char offset_8x16_fb, unsigned char count_8x16_zk)
{

	if (offset_8x16_fb == 1) return;
	if (offset_8x16_fb == 2) return;
	if (offset_8x16_fb == 3) return;
	if (offset_8x16_fb == 5) return;
	if (offset_8x16_fb == 6) return;
	if (offset_8x16_fb == 7) return;

	fill_8x16(offset_8x16_fb, count_8x16_zk);
	fill_8x16(offset_8x16_fb+1, count_8x16_zk+1);
	fill_8x16(offset_8x16_fb+2, count_8x16_zk+2);
	fill_8x16(offset_8x16_fb+3, count_8x16_zk+3);
}

/***************************

offset_8x16_fb:只能取如下值：
0,1,2或是4,5,6
3和7是不能取的

****************************/
static void fill_16x16(unsigned char offset_8x16_fb, unsigned char count_8x16_zk)
{
	if ((offset_8x16_fb == 3)||(offset_8x16_fb == 7))
		return;
	fill_8x16(offset_8x16_fb, count_8x16_zk);
	fill_8x16(offset_8x16_fb+1, count_8x16_zk+1);
}

/*
offset_8x16_fb:from 0,1,2,...7
count_8x16_zk:from 0,1,2,...7
*/
static void fill_8x16(unsigned char offset_8x16_fb, unsigned char count_8x16_zk)
{
	unsigned char i,j;
	unsigned char offset = count_8x16_zk*16;
	struct _rgb_line  *line;
	char buf[16];
	if (offset_8x16_fb < 4) {
		line = rgb_datas;
	} else {
		line = rgb_backup;
		offset_8x16_fb -= 4;
	}
	/*i表示第几行*/
	for(i=0; i<16; i++) {
		/*j表示第几个８列*/
		line[i].r[offset_8x16_fb] = hz_mem[offset+i].r;
		line[i].g[offset_8x16_fb] = hz_mem[offset+i].g;
		line[i].b[offset_8x16_fb] = hz_mem[offset+i].b;
	}
}

/*
 *参数包括有：
 *１、移动资源定位
 *２、装载数据时机
 *3、真正移位　
 * */

static void locate_resource(void)
{

}

static void locate_resource(void)
{
}

static void shift_a_bit(void)
{
	/*
	 * 12345678-12345678-12345678-12345678-|-12345678-12345678-12345678-12345678
	 */
	unsigned char i;
	unsigned long temp;
	unsigned long temp1;
	for (i=0;i<16;i++) {//全部移完1次,什么时候要补充rgb_backup的数据呢，只能是以最小单行8x16,所以移完
		temp = *(unsigned long *)&rgb_datas[i].r[0];
		temp1 = *(unsigned long *)&rgb_backup[i].r[0];
		temp=temp<<1;
		temp |= temp1>>31;
		temp1=temp1<<1;

		temp = *(unsigned long *)&rgb_datas[i].g[0];
		temp1 = *(unsigned long *)&rgb_backup[i].g[0];
		temp=temp<<1;
		temp |= temp1>>31;
		temp1=temp1<<1;

		temp = *(unsigned long *)&rgb_datas[i].b[0];
		temp1 = *(unsigned long *)&rgb_backup[i].b[0];
		temp=temp<<1;
		temp |= temp1>>31;
		temp1=temp1<<1;
	}
}
